# Innocent Promotion Bot source code
# Owned by Innocent Promotions â„¢
# Programmed by @dharmaraj_24 //Python-telegram-bot

# V1:---
# Basic Functions
# Updated Description and BotPic
# Print messages to channels
# // Use @username of channel in "chat_id='@username'"
# Developer commands only !!
users_data = {}
vip_developer = 293125876

#Importing Modules
try: 
    import os, telegram, time, sys, logging 
    from telegram.ext import Updater, CommandHandler, MessageHandler, Filters 
    from telegram.ext.dispatcher import run_async 
    from functools import wraps 
    from pprint import pprint
except ImportError as e:
    print("Problem: ",e) 
    exit() 

#Bot Data (Please insert bot token here!)
namebot = 'Innocent Promotion Bot '
verbot = 'v1' #<== You can change this version with your real bot version
tokenbot= '612573309:AAGAAuScxQlF21mw0kPvNyk9PqarnhgyrFs' #<-- Put your bot token here! 

#polling setup
try: 
    updater= Updater(tokenbot)
except ValueError as e: 
    print("Please insert your tokenbot!") 
    exit() 

#webhook setup
#
#Webhook(Heroku):
#-------------------------------
#PORT = int(os.environ.get('PORT', '5000'))
#updater.start_webhook(listen="0.0.0.0", port=PORT, url_path=TOKEN)
#
#updater.bot.start_webhook("https://<appname>.herokuapp.com/" + TOKEN)
#-------------------------------- 

#handling command
dispatcher = updater.dispatcher 

#logging setup
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

#Enter functioning
#Commands

@run_async
def start(bot, update):
    msg= "Hello ^_^ ! Please type /help for more assistance!"
    bot.send_message(chat_id=update.message.chat_id, text=msg)
    
@run_async
def help(bot, update):
    msg= "**`Here is a list of Available Commands!`** \n"
    msg+= "/developer - Meet my Developers \n"
    msg+= "/myid - Shows your Telegram ID \n"
    msg+= "/register - Register your channel for promotion! \n"
    bot.send_message(chat_id=update.message.chat_id, text=msg)
    
@run_async	
#Registration command code
def register(bot, update, args):
	#avoid request from grup (PM Only)
	if update.message.chat_id < 0:
		return
	#user data
	user_username = update.effective_user.username
	user_chatid   = update.message.chat_id
	user_firstname= update.message.from_user.first_name
	try:
	user_register = " ".join(args[0:])	
	except IndexError as e:
		update.message.reply_text("Please input your channel username!")
		return

	#filter for avoid spammer
	if len(user_register) > 50:
		bot.send_message(chat_id=update.message.chat_id, text="*Please do not exceed 50 characters*", parse_mode=telegram.ParseMode.MARKDOWN)
		return


	#send user data to users_data
	users_data[str(user_chatid)]= {"user_firstname":str(user_firstname), "user_username":user_username, "user_suggestion":user_suggestion}

	#make report message about user's biodata
	msg = "NAME: "+user_firstname+"\n"
	msg+= "Username  : @"+user_username+"\n"
	msg+= "Chat ID : @"+user_chatid+"\n"
	msg+= "Registered Channel  : "+user_register+"\n"

	print(users_data)
	print("\n")
	print(msg)

	#send message to user
	bot.send_message(chat_id=-1001371252461, text=msg, parse_mode=telegram.ParseMode.MARKDOWN)












#command Configuration

start_handler         = CommandHandler('start', start)
help_handler          = CommandHandler('help', help)
register_handler      = CommandHandler('register', register)









#setting command

dispatcher.add_handler(start_handler)
dispatcher.add_handler(help_handler)
dispatcher.add_handler(register_handler)










#polling

print(namebot,' ',verbot,' : Start!')
updater.start_polling()
